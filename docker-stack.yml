version: "3.8"

services:
  # Backend service (Go API)
  backend:
    image: ghcr.io/username/todo-app-backend:latest
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 5s
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
        reservations:
          memory: 128M
          cpus: "0.1"
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.api.rule=Host(`todo-app.localhost`) && PathPrefix(`/api`)"
        - "traefik.http.services.api.loadbalancer.server.port=8080"
        - "traefik.docker.network=todo-network"
    environment:
      - DB_PATH=/data/todos.db
      - PORT=8080
      - ENV=production
    volumes:
      - todo_data:/data
    networks:
      - todo-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/api/todos",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service (React + Nginx)
  frontend:
    image: ghcr.io/username/todo-app-frontend:latest
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 5s
      resources:
        limits:
          memory: 128M
          cpus: "0.2"
        reservations:
          memory: 64M
          cpus: "0.05"
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`todo-app.localhost`)"
        - "traefik.http.services.frontend.loadbalancer.server.port=80"
        - "traefik.docker.network=todo-network"
    environment:
      - NGINX_HOST=todo-app.localhost
      - NGINX_PORT=80
    networks:
      - todo-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Load Balancer / Reverse Proxy
  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@yourdomain.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - todo-network
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Database backup service
  backup:
    image: alpine:latest
    command: >
      sh -c "while true; do
        sleep 86400;
        cp /data/todos.db /backups/todos-$$(date +%Y%m%d_%H%M%S).db;
        find /backups -name '*.db' -mtime +7 -delete;
      done"
    volumes:
      - todo_data:/data:ro
      - backup_data:/backups
    networks:
      - todo-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  # Monitoring - Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    networks:
      - todo-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

# Named volumes for data persistence
volumes:
  todo_data:
    driver: local
  backup_data:
    driver: local
  traefik_data:
    driver: local
  prometheus_data:
    driver: local

# Overlay network for service communication
networks:
  todo-network:
    driver: overlay
    attachable: true
